# -*- coding: utf-8 -*-
"""20101420_MD SAFINUR AMIN

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KRP4Y61L_Vfl50XTWuXz8TdaQsXj3DQ8
"""

def createTree(input_list,syn):
    if len(input_list) == 0:
        return None
    elif len(input_list)==1:
      root_data=input_list[0]
      root_node = Node(root_data)
      root_node.nullable=False
      value=str(len(syn)+1)
      syn[str(len(syn)+1)]=[root_node.data]
      root_node.first_pos=[value]
      root_node.last_pos=[value]
      root_node.detail()#
      return root_node     
    elif len(input_list)==2 and ("*" in input_list or "+" in input_list or "?" in input_list):
      root_data=input_list[1]
      root_node = Node(root_data)
      center_sub_list=input_list[0]
      root_node.center = createTree(list(center_sub_list),syn)
      if root_node.data=="*" or root_node.data=="?":
        root_node.nullable=True
      else:
        root_node.nullable=False
      root_node.first_pos=root_node.center.first_pos
      root_node.last_pos=root_node.center.last_pos
      if root_node.data=="*":
        for i in root_node.last_pos:
          temp=[]
          for j in root_node.first_pos:
            temp.append(j)
          syn[i].append(temp)
      root_node.detail()#
    elif len(input_list)==3:
      root_data = input_list[1]
      root_node = Node(root_data)
      left_sub_list = input_list[0]
      right_sub_list = input_list[2]
      root_node.left = createTree(list(left_sub_list),syn)
      root_node.right = createTree(list(right_sub_list),syn)
      if root_node.data==".":
        if root_node.left.nullable==True and root_node.right.nullable==True:
          root_node.nullable=True
        else:
          root_node.nullable=False
        if root_node.left.nullable==True:
          root_node.first_pos=root_node.left.first_pos+root_node.right.first_pos
        else:
          root_node.first_pos=root_node.left.first_pos
        if root_node.right.nullable==True:
          root_node.last_pos=root_node.left.last_pos+root_node.right.last_pos
        else:
          root_node.last_pos=root_node.right.last_pos
      elif root_node.data=="|":
        if root_node.left.nullable==False and root_node.right.nullable==False:
          root_node.nullable=False
        else:
          root_node.nullable=True
        root_node.first_pos=root_node.left.first_pos+root_node.right.first_pos
        root_node.last_pos=root_node.left.last_pos+root_node.right.last_pos
      if root_node.data==".":
        for i in root_node.left.last_pos:
          temp=[]
          for j in root_node.right.first_pos:
            temp.append(j)
          syn[i].append(temp)
      root_node.detail()#
    return root_node




def dfa(state,transition,syn,symbol):
  states=[]
  for i in state:
    states.append(syn[i])
  temp={}
  for i in symbol:
    temp[i]=[]
  for i in states:
    if len(i)==1 and i[0]=="#":
      transition[tuple(state)]=temp
    else:
      temp[i[0]]+=i[-1]
  transition[tuple(state)]=temp
  for i in temp:
      if tuple(temp[i]) not in transition:
         dfa(temp[i],transition,syn,symbol)
  flag=False
  for i in transition:
   if len(i)==0:
    flag=True
  if flag==True:
    transition.pop(())
  return transition